DROP TABLE IF EXISTS runners;
CREATE TABLE runners (
  "runner_id" INTEGER,
  "registration_date" DATE
);
INSERT INTO runners
  ("runner_id", "registration_date")
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');


DROP TABLE IF EXISTS customer_orders;
CREATE TABLE customer_orders (
  "order_id" INTEGER,
  "customer_id" INTEGER,
  "pizza_id" INTEGER,
  "exclusions" VARCHAR(4),
  "extras" VARCHAR(4),
  "order_time" TIMESTAMP
);

INSERT INTO customer_orders
  ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');


DROP TABLE IF EXISTS runner_orders;
CREATE TABLE runner_orders (
  "order_id" INTEGER,
  "runner_id" INTEGER,
  "pickup_time" VARCHAR(19),
  "distance" VARCHAR(7),
  "duration" VARCHAR(10),
  "cancellation" VARCHAR(23)
);

INSERT INTO runner_orders
  ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');


DROP TABLE IF EXISTS pizza_names;
CREATE TABLE pizza_names (
  "pizza_id" INTEGER,
  "pizza_name" TEXT
);
INSERT INTO pizza_names
  ("pizza_id", "pizza_name")
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');


DROP TABLE IF EXISTS pizza_recipes;
CREATE TABLE pizza_recipes (
  "pizza_id" INTEGER,
  "toppings" TEXT
);
INSERT INTO pizza_recipes
  ("pizza_id", "toppings")
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');


DROP TABLE IF EXISTS pizza_toppings;
CREATE TABLE pizza_toppings (
  "topping_id" INTEGER,
  "topping_name" TEXT
);
INSERT INTO pizza_toppings
  ("topping_id", "topping_name")
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');
  
select *
from customer_orders;

select *
from runner_orders;

select *
from runners;

--Cleaning customer_orders
update customer_orders
set 
exclusions = case exclusions when '' then null else exclusions end,
extras = case extras when '' then null else extras end;

update customer_orders
set 
exclusions = case exclusions when 'null' then null else exclusions end,
extras = case extras when 'null' then null else extras end;

--Cleaning runner orders
update runner_orders
set
pickup_time=case pickup_time when 'null' then null else pickup_time end,
distance=case distance when 'null' then null else distance end,
duration=case duration when 'null' then null else duration end,
cancellation=case cancellation when 'null' then null else cancellation end;

update runner_orders
set
cancellation=case cancellation when '' then null else cancellation end;

-- update datatypes for runner table
alter table runner_orders
alter column pickup_time type timestamp using pickup_time::TIMESTAMP ;

select order_id, runner_id, pickup_time,
case
 when distance like '%km' then trim('km' from distance)
 else distance 
end as distance,
case
 when duration like '%minutes' then trim('minutes' from duration)
 when duration like '%mins' then trim('mins' from duration)
 when duration like '%minute' then trim('minute' from duration)
 else duration
end as duration, cancellation 
into runner_orders_1
from runner_orders

select *
from runner_orders_1;

alter table runner_orders_1
alter column distance type decimal(5,1) USING distance::numeric(5,1) ,
alter column duration type int USING duration::integer ;

--A. Pizza Metrics
--Q1 How many pizzas were ordered?
select count(pizza_id) as TotalPizzaOrdered 
from customer_orders;

--Q2 How many unique customer orders were made?
select count(distinct order_id) as TotalOrders
from customer_orders;

--Q3 How many successful orders were delivered by each runner?
select runner_id, count(order_id) as OrdersDelivered
from runner_orders_1
where distance is not null
group by runner_id;

--Q4 How many of each type of pizza was delivered?
select c.pizza_name, count(a.pizza_id) as TotalDelivered
from customer_orders as a
inner join runner_orders_1 as b
on a.order_id = b.order_id
inner join pizza_names as c
on c.pizza_id = a.pizza_id
where b.distance is not null
group by c.pizza_name;

--Q5 How many Vegetarian and Meatlovers were ordered by each customer?
select a.customer_id, b.pizza_name, count(a.pizza_id) as TotalPizzaOrdered
from customer_orders as a
inner join pizza_names as b
on a.pizza_id = b.pizza_id
group by a.customer_id, b.pizza_name
order by a.customer_id;

--Q6 What was the maximum number of pizzas delivered in a single order?
select a.order_id, count(b.pizza_id) as TotalDelivered
from runner_orders_1 as a
inner join customer_orders as b
on b.order_id = a.order_id
where a.distance is not null
group by a.order_id
order by Totaldelivered desc
limit 1;

--Q7 For each customer, how many delivered pizzas had at least 1 change, and how many had no changes?
select a.customer_id,
sum(case when a.exclusions is not null or a.extras is not null then 1 else 0 end) as Change,
sum(case when a.exclusions is  null and a.extras is  null then 1 else 0 end) as No_Change
from customer_orders as a
join 
runner_orders_1 as b
on a.order_id=b.order_id
where b.distance is not null
group by a.customer_id
order by a.customer_id;

--Q8 How many pizzas were delivered that had both exclusions and extras?
select sum(case when a.exclusions is not null and a.extras is not null then 1 else 0 end) as Both_Change
from customer_orders as a
join 
runner_orders_1 as b
on a.order_id=b.order_id
where b.distance is not null;

--Q9 What was the total volume of pizzas ordered for each hour of the day?
select extract(hour from order_time) as hours,count(order_id) as volume
from customer_orders
group by hours
order by hours;

--Q10 What was the volume of orders for each day of the week?
select *,count(a.day)
from(
select to_char(order_time, 'Day') as day
from customer_orders) as a
group by a.day;

--B. Runner and Customer Experience
--Q1 How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
create table week_2021(
week_no int,
start_date date ,
end_date date
);

insert into week_2021 
values(0,'2021-01-01','2021-01-07'),
(1,'2021-01-08','2021-01-14'),
(2,'2021-01-15','2021-01-21');

select a.week_no,
sum(case when b.registration_date between a.start_date and a.end_date then 1 else 0 end) as enroll_count
from week_2021 as a
join 
runners as b
on a.start_date<=b.registration_date and b.registration_date<=a.end_date
group by a.week_no;

--Q2 What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
select a.runner_id,avg(a.pickup_time-b.order_time) as avg_pickup_time 
from runner_orders_1 as a
join
customer_orders as b
on a.order_id=b.order_id
where a.pickup_time is not null
group by a.runner_id;

--Q3 Is there any relationship between the number of pizzas and how long the order takes to prepare?
select a.no_of_pizza,avg(a.ready_time) from(
select count(b.order_id) as no_of_pizza,avg(a.pickup_time-b.order_time) as ready_time 
from runner_orders_1 as a
join
customer_orders as b
on a.order_id=b.order_id
where a.pickup_time is not null
group by b.order_id) as a
group by a.no_of_pizza
order by a.no_of_pizza;

--Q4 What was the average distance travelled for each customer?
select a.customer_id,round(avg(b.distance),3) as avg_distance
from customer_orders as a
join
runner_orders_1 as b
on a.order_id=b.order_id
group by a.customer_id;

--Q5 What was the difference between the longest and shortest delivery times for all orders?
select max(duration)-min(duration) as diff
from runner_orders_1;

--Q6 What was the average speed for each runner for each delivery and do you notice any trend for these values?
select runner_id,order_id,round(cast(distance as numeric)/(duration/60.0),2)as speed
from runner_orders_1
where distance is not null
order by runner_id;

--Q7 What is the successful delivery percentage for each runner?
with total as(
select runner_id,count(*) as total_delivery--count(*) counts null values too
from runner_orders_1
group by runner_id
),success as (
select runner_id,count(distance)  as success_delivery
from runner_orders_1
where distance is not null
group by runner_id
)
select a.runner_id,round(((b.success_delivery*100.0)/a.total_delivery),0) as success_percent
from total as a
join
success as b
on a.runner_id=b.runner_id
order by a.runner_id;
